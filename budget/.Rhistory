'Mango',
'Sexystyle',
'Zara',
'Douglas',
'Accessorize',
'Apavi40plus',
'Akropole',
'Domina'
) ~ 'Shopping',
category %in% c('Bolt', 'Yandex') ~ 'Taxi',
category %in% c('LabasPreces') ~ 'Home',
category %in% c('Bilesuserviss','Booking') ~ 'Culture&Relax',
category %in% c('Hairdresser') ~ 'Beauty',
category %in% c('LedusSkola','DrivingLessons','Books') ~ 'Self-Development',
T ~ category)
)
# How many gave you categorized so far?
table(bank_stmt$category)/nrow(bank_stmt)
# In the process of keyword searching, you want to refine categories so that "Other" contains less
bank_stmt %>% filter(category == 'Other') %>% arrange(desc(amount)) %>% select(description_f,description, type, amount) %>% as_tibble() %>%  View()
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Subscriptions",
"Shopping",
"Lunch at work",
"Taxi",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'darkviolet',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkyellow'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Subscriptions",
"Shopping",
"Lunch at work",
"Taxi",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'darkviolet',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkyellow',
'cyan'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Subscriptions",
"Shopping",
"Lunch at work",
"Taxi",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'darkviolet',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkgoldenrod3',
'cyan'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Subscriptions",
"Shopping",
"Lunch at work",
"Taxi",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'deeppink2',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkgoldenrod3',
'cyan'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Subscriptions",
"Shopping",
"Lunch at work",
"Taxi",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'deeppink2',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkgoldenrod3',
'cyan'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Convenience shops",
"Subscriptions",
"Shopping",
"Lunch at work",
"Culture&Relax",
"Beauty",
"Self-Development",
"Taxi",
"Home",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'deeppink2',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkgoldenrod3',
'cyan'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(magrittr)
library(dplyr)
library(magrittr)
library(ggplot2)
ui <- fluidPage(
# checkboxGroupInput("timeframe", "Group by", c("transaction_month","transaction_week")),
plotOutput(outputId = "budget_overall"),
selectInput(inputId = 'category_main', "Category of choice", c("Groceries",
"Food delivery",
"Bars",
"Convenience shops",
"Subscriptions",
"Shopping",
"Lunch at work",
"Culture&Relax",
"Beauty",
"Self-Development",
"Taxi",
"Home",
"Poker",
"PhoneBill",
"Other")),
plotOutput(outputId = "budget_category")
)
server <- function(input, output) {
dat_1 <- reactive({bank_stmt %>% filter(!(category %in% c('Incoming', 'Cash withdrawal','Self Transfer')),
!(is.na(transaction_yearmonth))) %>%
group_by(transaction_yearmonth, category_main) %>%
summarise(total_amount = sum(amount, na.rm = T)) %>%
ungroup()})
output$budget_overall <-   renderPlot(
{
ggplot(dat_1(),aes(transaction_yearmonth, total_amount)) +geom_bar(position = 'stack', stat = 'identity',aes(fill = category_main)) +
scale_colour_manual(values =
c('red',
'blue',
'green',
'yellow',
'violet',
'deeppink2',
'black',
'salmon',
'beige',
'lightgrey',
'purple',
'darkgreen',
'orange1',
'lightblue',
'brown',
'blue2',
'pink',
'darkgrey',
'white',
'lightgreen',
'darkgoldenrod3',
'cyan'), aesthetics = "fill", breaks = waiver())
}
)
dat <- reactive({bank_stmt[bank_stmt$category_main==input$category_main,] %>%
group_by(transaction_yearmonth) %>%
summarise(total_amount = sum(amount))})
output$budget_category <- renderPlot(
{
ggplot(dat(),aes(transaction_yearmonth,total_amount))+geom_bar(position = 'stack', stat = 'identity', fill = 'pink') +
geom_text(aes(label=total_amount), position=position_dodge(width=0.9), vjust=0.5) +
xlab(input$category)
}
)
}
shinyApp(ui = ui, server = server)
pfsumm <- read.csv2("C:/Users/Kristiana.stauere/Downloads/SO_type_Full_Data_data.csv")
View(pfsumm)
write.csv(pfsumm,"063021_se_perfsumm.csv",row.names = F)
getwd()
library(readr)
additional_apps_olli <- read_delim("C:/Users/Kristiana.stauere/Downloads/Additional_applications_Full_Data_data (1).csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(additional_apps_olli)
write.csv(additional_apps_olli,"additional_apps_olli.csv",row.names = F)
getwd()
`Additional_applications_Full_Data_data.(2)` <- read.csv2("C:/Users/Kristiana.stauere/Downloads/Additional_applications_Full_Data_data (2).csv")
View(`Additional_applications_Full_Data_data.(2)`)
aa<-`Additional_applications_Full_Data_data.(2)`
rm(`Additional_applications_Full_Data_data.(2)`)
library(dplyr)
aa %>% filter(applicationid==141134)
write.csv(aa,"olli_apps_reconcile.csv",row.names = F)
perfsumm <- read.csv2("C:/Users/Kristiana.stauere/Downloads/scores_Full_Data_data (2).csv")
View(perfsumm)
write.csv(perfsumm, "perfsumm.csv",row.names = F)
getwd()
