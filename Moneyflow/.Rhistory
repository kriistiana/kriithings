'payer_ind_size',
'seller_ind_size',
'offer_cost_percent',
'payer_risika_score_num',
'seller_age_num',
'invoice_amount',
'inv_due2today',
'inv_iss2due',
'seller_risika_score',
'seller_danish_pep_num',
'seller_comp_size',
'payer_comp_size',
'response'
)
set.seed(101) # Set Seed so that same sample can be reproduced in future also
# Now Selecting 75% of data as sample from total 'n' rows of the data
sample <- sample.int(n = nrow(invoices_clean), size = floor(.75*nrow(invoices_clean)), replace = F)
train_dat <- invoices_clean[sample, initial_set_variables]
test_dat  <- invoices_clean[-sample,initial_set_variables ]
xg <- XGBTrainer$new(early_stopping = 50,
objective = 'binary:logistic')
xgb_model_1 <- GridSearchCV$new(trainer = xg,
parameters = list(n_estimators = c(1500),
learning_rate = c(0.01, 0.1),
max_depth = c(5,2,10)),
n_folds = 3,
scoring = c('accuracy','auc'))
xgb_model_1$fit(train_dat %>%
dplyr::select(-inv_due2today,
- seller_age) %>%
select_if(is.numeric), "response")
xgb_model_1$fit(train_dat , "response")
xgb_model_1$evaluation_scores
initial_model.cv <- xgb.cv(data = xgb.DMatrix(train_dat %>%
select(-response) %>%
as.matrix(),
label = train_dat$response),
params = list(
eta = 0.01,
max_depth = 5,
objective = "binary:logistic",
eval_metric = "auc"),
nfold = 3,
nrounds = 5000)
ggplot(initial_model.cv$evaluation_log,aes(x=iter)) +
geom_point(aes(y=test_auc_mean), color = "green") +
geom_point(aes(y=train_auc_mean), color = "red")
initial_model.cv$evaluation_log %>% View()
initial_model.cv <- xgb.cv(data = xgb.DMatrix(train_dat %>%
select(-response) %>%
as.matrix(),
label = train_dat$response),
params = list(
eta = 0.01,
max_depth = 10,
objective = "binary:logistic",
eval_metric = "auc"),
nfold = 3,
nrounds = 5000)
ggplot(initial_model.cv$evaluation_log,aes(x=iter)) +
geom_point(aes(y=test_auc_mean), color = "green") +
geom_point(aes(y=train_auc_mean), color = "red")
initial_model.cv$evaluation_log %>% View()
initial_model <- xgboost(data = xgb.DMatrix(train_dat %>%
dplyr::select(- response,
- inv_due2today) %>%
select_if(is.numeric) %>%
as.matrix(),
label = train_dat$response),
params = list(
eta = 0.01,
max_depth = 10,
objective = "binary:logistic",
eval_metric = "auc"),
nrounds = 1750)
xgb.importance(model=initial_model)
cor(invoices_clean)
cor(invoices_clean %>% select_if(is.numeric))
?co
?cor
cormatrix <- cor(invoices_clean %>% select_if(is.numeric), use = 'pairwise.complete.obs')
round(cormatrix,2)
View(cormatrix)
xgb.importance(model=initial_model)
adjusted_set_variables <- c(
'payer_age_num',
'payer_ind_size',
'seller_ind_size',
'offer_cost_percent',
'payer_risika_score_num',
'seller_age_num',
'invoice_amount',
'inv_due2today',
'inv_iss2due',
# 'seller_danish_pep_num',
# 'seller_comp_size',
# 'payer_comp_size',
'seller_risika_score',
'response'
)
initial_model.cv <- xgb.cv(data = xgb.DMatrix(train_dat %>%
select(adjusted_set_variables,
-response) %>%
as.matrix(),
label = train_dat$response),
params = list(
eta = 0.01,
max_depth = 10,
objective = "binary:logistic",
eval_metric = "auc"),
nfold = 3,
nrounds = 5000)
ggplot(initial_model.cv$evaluation_log,aes(x=iter)) +
geom_point(aes(y=test_auc_mean), color = "green") +
geom_point(aes(y=train_auc_mean), color = "red")
initial_model.cv$evaluation_log %>% View()
ggplot(tuned_model.cv$evaluation_log,aes(x=iter)) +
geom_point(aes(y=test_auc_mean), color = "green") +
geom_point(aes(y=train_auc_mean), color = "red")
tuned_model.cv <- xgb.cv(data = xgb.DMatrix(train_dat %>%
select(all_of(adjusted_set_variables),
-response) %>%
as.matrix(),
label = train_dat$response),
params = list(
eta = 0.01,
max_depth = 10,
objective = "binary:logistic",
eval_metric = "auc"),
nfold = 3,
nrounds = 5000)
ggplot(tuned_model.cv$evaluation_log,aes(x=iter)) +
geom_point(aes(y=test_auc_mean), color = "green") +
geom_point(aes(y=train_auc_mean), color = "red")
tuned_model.cv$evaluation_log %>% View()
tuned_model <- xgboost(data = xgb.DMatrix(train_dat %>%
dplyr::select(all_of(adjusted_set_variables),
- response) %>%
select_if(is.numeric) %>%
as.matrix(),
label = train_dat$response),
params = list(
eta = 0.01,
max_depth = 10,
objective = "binary:logistic",
eval_metric = "auc"),
nrounds = 730)
xgb.importance(model=tuned_model)
train_pca <- prcomp(train_dat %>% select(adjusted_set_variables), center = T, scale. = T)
?prcomp
train_pca <- prcomp(train_dat %>% select(adjusted_set_variables), center = T, scale. = T, na.action = "na.omit")
train_pca <- prcomp(train_dat %>% select(adjusted_set_variables), center = T, scale. = T, na.action("na.omit"))
test_dat$predicted <- predict(tuned_model,
test_dat %>% select(adjusted_set_variables))
test_dat$predicted <- predict(tuned_model,
xgb.DMatrix(test_dat %>%
dplyr::select(all_of(adjusted_set_variables),
- response) %>%
select_if(is.numeric) %>%
as.matrix(),
label = test_dat$response))
test_dat$predicted <- predict(tuned_model,
xgb.DMatrix(test_dat %>%
dplyr::select(all_of(adjusted_set_variables),
- response) %>%
select_if(is.numeric) %>%
as.matrix(),
label = test_dat$response))
qplot(test_dat$predicted
)
as.matrix())
test_dat$predicted <- predict(tuned_model,
xgb.DMatrix(test_dat %>%
dplyr::select(all_of(adjusted_set_variables),
- response) %>%
select_if(is.numeric) %>%
as.matrix()))
qplot(test_dat$predicted)
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,1,0.05))) %>%
summarise(nn = n(),
br = mean(response),
distr = round(nn/nrow(.)),3)
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,1,0.05))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,0.15,0.01))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
?auc
Metrics::auc(test_dat$response, test_dat$predicted)
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,0.2,0.025))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,0.05,0.01))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,0.01,0.001))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
?predict
test_dat$predicted <- predict(tuned_model,
xgb.DMatrix(test_dat %>%
dplyr::select(all_of(adjusted_set_variables),
- response) %>%
select_if(is.numeric) %>%
as.matrix()),
type = 'response')
qplot(test_dat$predicted)
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,0.05,0.01))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
test_dat %>%
group_by(prec_groups = cut(predicted, breaks = seq(0,0.01,0.001))) %>%
summarise(nn = n(),
br = mean(response),
distr = nn/nrow(.))
invoices_clean %>%
group_by(invoice_issue_yearmonth) %>%
summarise(nn = n(),
br = mean(response))
library(readxl) # excel import
library(pillar) # glimpse
library(ggplot2) # visualizations
library(dplyr) # data wrangling
library(lubridate) # dates
library(rlang) # debugging
library(Hmisc) # multi- histogram
library(Information) # Information value
library(xgboost)
library(superml)
invoices <- read_excel("Moneyflow DS interview Case.xlsx",
sheet = "Train")
library(readxl) # excel import
library(pillar) # glimpse
library(ggplot2) # visualizations
library(dplyr) # data wrangling
library(lubridate) # dates
library(rlang) # debugging
library(Hmisc) # multi- histogram
library(Information) # Information value
library(xgboost)
library(superml)
invoices <- read_excel("Moneyflow DS interview Case.xlsx",
sheet = "Train")
```{r, echo = F}
library(readxl) # excel import
library(pillar) # glimpse
library(ggplot2) # visualizations
library(dplyr) # data wrangling
library(lubridate) # dates
library(rlang) # debugging
library(Hmisc) # multi- histogram
library(Information) # Information value
library(xgboost)
library(superml)
invoices <- read_excel("Moneyflow DS interview Case.xlsx",
sheet = "Train")
library(readxl) # excel import
library(pillar) # glimpse
library(ggplot2) # visualizations
library(dplyr) # data wrangling
library(lubridate) # dates
library(rlang) # debugging
library(Hmisc) # multi- histogram
library(Information) # Information value
library(xgboost)
library(superml)
invoices <- read_excel("Moneyflow DS interview Case.xlsx",
sheet = "Train")
library(readxl) # excel import
library(pillar) # glimpse
library(ggplot2) # visualizations
library(dplyr) # data wrangling
library(lubridate) # dates
library(rlang) # debugging
library(Hmisc) # multi- histogram
library(Information) # Information value
library(xgboost)
library(superml)
invoices <- read_excel("Moneyflow DS interview Case.xlsx",
sheet = "Train")
invoices_clean %>%
group_by(invoice_issue_yearmonth) %>%
summarise(nn = n(),
br = mean(response))
hist.data.frame(invoices_clean %>% select_if(is.numeric), n.unique =  2)
View(invoices_clean)
infvalue <- create_infotables(data=invoices_clean, y="response", bins=10, parallel=FALSE)
infvalue$Summary %>% View()
invoices_clean <- invoices %>%
select(- invoice_id,
- seller_is_public #since there are only 12 observations which are all missing
- payer_eu_sanctions) %>%
mutate(
response = case_when(defaulted == 'y' ~ 1, T ~ 0),
seller_danish_pep_num = as.numeric(seller_danish_pep),
payer_is_public_num = suppressWarnings(as.numeric(payer_is_public)),
payer_danish_pep_num = as.numeric(payer_danish_pep),
payer_eu_sanctions_num = as.numeric(payer_eu_sanctions),
payer_risika_score_num = suppressWarnings(as.numeric(payer_risika_score)),
offer_seller_is_first_invoice_num = suppressWarnings(as.numeric(offer_seller_is_first_invoice)),
payer_age_num = suppressWarnings(case_when(as.numeric(payerr_age) == 2021 ~ 1,
T ~ as.numeric(payerr_age))), # assuming 2021 is an error
seller_age_num = as.numeric(seller_age),
invoice_issue_date = today() - days(inv_due2today),
invoice_issue_yearmonth = paste0(year(invoice_issue_date),
case_when(
nchar(month(invoice_issue_date)) == 1 ~ paste0('0',month(invoice_issue_date)),
T ~ as.character(month(invoice_issue_date)))),
seller_payer_company_type_match = case_when(seller_company_type == payer_company_type ~ 1, T ~ 0),
seller_payer_industry_type_match = case_when(seller_main_industry_code == payer_main_industry_code ~ 1, T ~ 0)) %>%
left_join(seller_industry_size, by = 'seller_main_industry_code') %>%
left_join(seller_company_size, by = 'seller_company_type') %>%
left_join(payer_industry_size, by = 'payer_main_industry_code') %>%
left_join(payer_company_size, by = 'payer_company_type') %>%
mutate(payer_comp_type_f = case_when(payer_comp_size >0.50 ~'Large',
payer_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
seller_comp_type_f = case_when(seller_comp_size >0.50 ~'Large',
seller_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
payer_industry_size_f = case_when(payer_ind_size >0.1 ~'Large',
payer_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
seller_industry_size_f = case_when(seller_ind_size >0.07 ~'Large',
seller_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
)
invoices_clean <- invoices %>%
dplyr::select(- invoice_id,
- seller_is_public #since there are only 12 observations which are all missing
- payer_eu_sanctions) %>%
mutate(
response = case_when(defaulted == 'y' ~ 1, T ~ 0),
seller_danish_pep_num = as.numeric(seller_danish_pep),
payer_is_public_num = suppressWarnings(as.numeric(payer_is_public)),
payer_danish_pep_num = as.numeric(payer_danish_pep),
payer_eu_sanctions_num = as.numeric(payer_eu_sanctions),
payer_risika_score_num = suppressWarnings(as.numeric(payer_risika_score)),
offer_seller_is_first_invoice_num = suppressWarnings(as.numeric(offer_seller_is_first_invoice)),
payer_age_num = suppressWarnings(case_when(as.numeric(payerr_age) == 2021 ~ 1,
T ~ as.numeric(payerr_age))), # assuming 2021 is an error
seller_age_num = as.numeric(seller_age),
invoice_issue_date = today() - days(inv_due2today),
invoice_issue_yearmonth = paste0(year(invoice_issue_date),
case_when(
nchar(month(invoice_issue_date)) == 1 ~ paste0('0',month(invoice_issue_date)),
T ~ as.character(month(invoice_issue_date)))),
seller_payer_company_type_match = case_when(seller_company_type == payer_company_type ~ 1, T ~ 0),
seller_payer_industry_type_match = case_when(seller_main_industry_code == payer_main_industry_code ~ 1, T ~ 0)) %>%
left_join(seller_industry_size, by = 'seller_main_industry_code') %>%
left_join(seller_company_size, by = 'seller_company_type') %>%
left_join(payer_industry_size, by = 'payer_main_industry_code') %>%
left_join(payer_company_size, by = 'payer_company_type') %>%
mutate(payer_comp_type_f = case_when(payer_comp_size >0.50 ~'Large',
payer_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
seller_comp_type_f = case_when(seller_comp_size >0.50 ~'Large',
seller_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
payer_industry_size_f = case_when(payer_ind_size >0.1 ~'Large',
payer_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
seller_industry_size_f = case_when(seller_ind_size >0.07 ~'Large',
seller_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
)
invoices_clean <- invoices %>%
dplyr::select(- invoice_id,
- seller_is_public #since there are only 12 observations which are all missing
- payer_eu_sanctions)
colnames(invoices)
colnames(invoices)
invoices_clean <- invoices %>%
select(- invoice_id,
- seller_is_public, #since there are only 12 observations which are all missing
- payer_eu_sanctions) %>%
mutate(
response = case_when(defaulted == 'y' ~ 1, T ~ 0),
seller_danish_pep_num = as.numeric(seller_danish_pep),
payer_is_public_num = suppressWarnings(as.numeric(payer_is_public)),
payer_danish_pep_num = as.numeric(payer_danish_pep),
payer_eu_sanctions_num = as.numeric(payer_eu_sanctions),
payer_risika_score_num = suppressWarnings(as.numeric(payer_risika_score)),
offer_seller_is_first_invoice_num = suppressWarnings(as.numeric(offer_seller_is_first_invoice)),
payer_age_num = suppressWarnings(case_when(as.numeric(payerr_age) == 2021 ~ 1,
T ~ as.numeric(payerr_age))), # assuming 2021 is an error
seller_age_num = as.numeric(seller_age),
invoice_issue_date = today() - days(inv_due2today),
invoice_issue_yearmonth = paste0(year(invoice_issue_date),
case_when(
nchar(month(invoice_issue_date)) == 1 ~ paste0('0',month(invoice_issue_date)),
T ~ as.character(month(invoice_issue_date)))),
seller_payer_company_type_match = case_when(seller_company_type == payer_company_type ~ 1, T ~ 0),
seller_payer_industry_type_match = case_when(seller_main_industry_code == payer_main_industry_code ~ 1, T ~ 0)) %>%
left_join(seller_industry_size, by = 'seller_main_industry_code') %>%
left_join(seller_company_size, by = 'seller_company_type') %>%
left_join(payer_industry_size, by = 'payer_main_industry_code') %>%
left_join(payer_company_size, by = 'payer_company_type') %>%
mutate(payer_comp_type_f = case_when(payer_comp_size >0.50 ~'Large',
payer_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
seller_comp_type_f = case_when(seller_comp_size >0.50 ~'Large',
seller_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
payer_industry_size_f = case_when(payer_ind_size >0.1 ~'Large',
payer_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
seller_industry_size_f = case_when(seller_ind_size >0.07 ~'Large',
seller_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
)
invoices_clean <- invoices %>%
select(- invoice_id,
- seller_is_public, #since there are only 12 observations which are all missing
- payer_eu_sanctions)
colnames(invoices)
invoices_clean <- invoices %>%
select(- invoice_id,
- seller_is_public, #since there are only 12 observations which are all missing
- payer_eu_sanctions) %>%
mutate(
response = case_when(defaulted == 'y' ~ 1, T ~ 0),
seller_danish_pep_num = as.numeric(seller_danish_pep),
payer_is_public_num = suppressWarnings(as.numeric(payer_is_public)),
payer_danish_pep_num = as.numeric(payer_danish_pep),
payer_risika_score_num = suppressWarnings(as.numeric(payer_risika_score)),
offer_seller_is_first_invoice_num = suppressWarnings(as.numeric(offer_seller_is_first_invoice)),
payer_age_num = suppressWarnings(case_when(as.numeric(payerr_age) == 2021 ~ 1,
T ~ as.numeric(payerr_age))), # assuming 2021 is an error
seller_age_num = as.numeric(seller_age),
invoice_issue_date = today() - days(inv_due2today),
invoice_issue_yearmonth = paste0(year(invoice_issue_date),
case_when(
nchar(month(invoice_issue_date)) == 1 ~ paste0('0',month(invoice_issue_date)),
T ~ as.character(month(invoice_issue_date)))),
seller_payer_company_type_match = case_when(seller_company_type == payer_company_type ~ 1, T ~ 0),
seller_payer_industry_type_match = case_when(seller_main_industry_code == payer_main_industry_code ~ 1, T ~ 0)) %>%
left_join(seller_industry_size, by = 'seller_main_industry_code') %>%
left_join(seller_company_size, by = 'seller_company_type') %>%
left_join(payer_industry_size, by = 'payer_main_industry_code') %>%
left_join(payer_company_size, by = 'payer_company_type') %>%
mutate(payer_comp_type_f = case_when(payer_comp_size >0.50 ~'Large',
payer_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
seller_comp_type_f = case_when(seller_comp_size >0.50 ~'Large',
seller_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
payer_industry_size_f = case_when(payer_ind_size >0.1 ~'Large',
payer_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
seller_industry_size_f = case_when(seller_ind_size >0.07 ~'Large',
seller_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
)
invoices_clean %>%
group_by(invoice_issue_yearmonth) %>%
summarise(nn = n(),
br = mean(response))
colnames(invoices)
invoices_clean <- invoices %>%
select(- invoice_id,
- seller_is_public, #since there are only 12 observations which are all missing
- payer_eu_sanctions) %>%
mutate(
response = case_when(defaulted == 'y' ~ 1, T ~ 0),
seller_danish_pep_num = as.numeric(seller_danish_pep),
payer_is_public_num = case_when(is.false(payer_is_public) ~ 0,
T ~ 1),
payer_danish_pep_num = as.numeric(payer_danish_pep),
payer_risika_score_num = suppressWarnings(as.numeric(payer_risika_score)),
offer_seller_is_first_invoice_num = suppressWarnings(as.numeric(offer_seller_is_first_invoice)),
payer_age_num = suppressWarnings(case_when(as.numeric(payerr_age) == 2021 ~ 1,
T ~ as.numeric(payerr_age))), # assuming 2021 is an error
seller_age_num = as.numeric(seller_age),
invoice_issue_date = today() - days(inv_due2today),
invoice_issue_yearmonth = paste0(year(invoice_issue_date),
case_when(
nchar(month(invoice_issue_date)) == 1 ~ paste0('0',month(invoice_issue_date)),
T ~ as.character(month(invoice_issue_date)))),
seller_payer_company_type_match = case_when(seller_company_type == payer_company_type ~ 1, T ~ 0),
seller_payer_industry_type_match = case_when(seller_main_industry_code == payer_main_industry_code ~ 1, T ~ 0)) %>%
left_join(seller_industry_size, by = 'seller_main_industry_code') %>%
left_join(seller_company_size, by = 'seller_company_type') %>%
left_join(payer_industry_size, by = 'payer_main_industry_code') %>%
left_join(payer_company_size, by = 'payer_company_type') %>%
mutate(payer_comp_type_f = case_when(payer_comp_size >0.50 ~'Large',
payer_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
seller_comp_type_f = case_when(seller_comp_size >0.50 ~'Large',
seller_comp_size > 0.1 ~ 'Medium',
T ~ 'Small'),
payer_industry_size_f = case_when(payer_ind_size >0.1 ~'Large',
payer_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
seller_industry_size_f = case_when(seller_ind_size >0.07 ~'Large',
seller_ind_size > 0.01 ~ 'Medium',
T ~ 'Small'),
)
