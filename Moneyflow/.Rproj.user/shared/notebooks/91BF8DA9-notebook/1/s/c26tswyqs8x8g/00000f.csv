"0","invoices_test <- read_excel(""Moneyflow DS interview Case.xlsx"", "
"0","                       sheet = ""Predict"")"
"2","Warning: Expecting logical in H1286 / R1286C8: got '?'"
"2","Warning: Expecting numeric in T1286 / R1286C20: got '?'"
"2","Warning: Expecting logical in H1863 / R1863C8: got '?'"
"2","Warning: Expecting numeric in T1863 / R1863C20: got '?'"
"0","invoices_test_clean <- invoices_test %>% "
"0","  select(- invoice_id,"
"0","         - seller_is_public, #since there are only 12 observations which are all missing"
"0","         - payer_eu_sanctions) %>% "
"0","  mutate("
"0","    response = case_when(defaulted == 'y' ~ 1, T ~ 0),"
"0","    seller_danish_pep_num = as.numeric(seller_danish_pep),"
"0","    payer_is_public_num = case_when(payer_is_public == ""FALSE"" ~ 0,"
"0","                                    payer_is_public == ""TRUE"" ~ 1,"
"0","                                    T ~ NA_real_),"
"0","    payer_danish_pep_num = as.numeric(payer_danish_pep),"
"0","    "
"0","    payer_risika_score_num = suppressWarnings(as.numeric(payer_risika_score)),"
"0","    "
"0","    offer_seller_is_first_invoice_num = case_when(offer_seller_is_first_invoice == ""FALSE"" ~ 0,"
"0","                                    offer_seller_is_first_invoice == ""TRUE"" ~ 1,"
"0","                                    T ~ NA_real_),"
"0","    payer_age_num = suppressWarnings(case_when(as.numeric(payerr_age) == 2021 ~ 1,"
"0","                                               T ~ as.numeric(payerr_age))), # assuming 2021 is an error"
"0","    seller_age_num = as.numeric(seller_age),"
"0","    invoice_issue_date = today() - days(inv_due2today),"
"0","    invoice_issue_yearmonth = paste0(year(invoice_issue_date),"
"0","                                     case_when("
"0","                                       nchar(month(invoice_issue_date)) == 1 ~ paste0('0',month(invoice_issue_date)), "
"0","                                       T ~ as.character(month(invoice_issue_date)))),"
"0","    seller_payer_company_type_match = case_when(seller_company_type == payer_company_type ~ 1, T ~ 0),"
"0","    seller_payer_industry_type_match = case_when(seller_main_industry_code == payer_main_industry_code ~ 1, T ~ 0)) %>%"
"0","  "
"0","  left_join(seller_industry_size, by = 'seller_main_industry_code') %>% "
"0","  left_join(seller_company_size, by = 'seller_company_type') %>% "
"0","  left_join(payer_industry_size, by = 'payer_main_industry_code') %>% "
"0","  left_join(payer_company_size, by = 'payer_company_type') %>% "
"0","  "
"0","  mutate(payer_comp_type_f = case_when(payer_comp_size >0.50 ~'Large',"
"0","                                            payer_comp_size > 0.1 ~ 'Medium',"
"0","                                            T ~ 'Small'),"
"0","         seller_comp_type_f = case_when(seller_comp_size >0.50 ~'Large',"
"0","                                       seller_comp_size > 0.1 ~ 'Medium',"
"0","                                           T ~ 'Small'),"
"0","         payer_industry_size_f = case_when(payer_ind_size >0.1 ~'Large',"
"0","                                           payer_ind_size > 0.01 ~ 'Medium',"
"0","                                           T ~ 'Small'),"
"0","         seller_industry_size_f = case_when(seller_ind_size >0.07 ~'Large',"
"0","                                       seller_ind_size > 0.01 ~ 'Medium',"
"0","                                       T ~ 'Small'),"
"0","         )"
"0",""
"0","invoices_test_clean$predicted <- predict(tuned_model,"
"0","                              xgb.DMatrix(invoices_test_clean %>%"
"0","                                              dplyr::select(all_of(adjusted_set_variables),"
"0","                                                            - response) %>%"
"0","                                              select_if(is.numeric) %>% "
"0","                                              as.matrix()),"
"0","                              type = 'response')"
"0",""
"0","saveRDS(tuned_model, ""final_moneyflow_model.rds"")"
"0","write.csv(cbind(invoices_test$invoice_id,invoices_test_clean), ""test_predictions.csv"", row.names = F)"
"0",""
"0","Metrics::auc(invoices_test_clean$response,"
"0","             invoices_test_clean$predicted)"
"1","[1]"
"1"," 0.7742744"
"1","
"
"0","res_clean <- invoices_test_clean %>% "
"0","  group_by(prec_groups = cut(predicted, breaks = seq(0,1,0.1))) %>% "
"0","  summarise(nn = n(),"
"0","            br = mean(response),"
"0","            distr = nn/nrow(.))"
"0",""
"0","gridExtra::grid.arrange(res_clean %>% "
"0","                          ggplot(aes(prec_groups,br)) + "
"0","                          geom_point() + "
"0","                          xlab(""Badrate"") +"
"0","                          geom_label(aes(y = br + 0.05,label = round(br,3))) +"
"0","                          scale_x_discrete(""Badrate""),"
"0","                        "
"0","                        res_clean %>%  "
"0","                          ggplot(aes(prec_groups,distr)) + "
"0","                          geom_bar(stat = ""identity"") + "
"0","                          xlab(""Distribution"") +"
"0","                          geom_label(aes(y = distr + 0.1,label = round(distr,3))) +"
"0","                          scale_x_discrete(""Distribution""))"
